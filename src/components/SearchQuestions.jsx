import React, { useState, useMemo } from 'react';
import {
  Box,
  TextField,
  Card,
  CardContent,
  Typography,
  Chip,
  Button,
  Paper,
  InputAdornment,
  IconButton,
  Collapse,
  Alert,
  Grid,
  Divider,
} from '@mui/material';
import {
  Search,
  Clear,
  ExpandMore,
  ExpandLess,
  Quiz,
  Warning,
  CheckCircle,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import questionsData from '../data/questions.json';

const SearchQuestions = () => {
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedQuestions, setExpandedQuestions] = useState(new Set());

  // Tr√≠ch xu·∫•t t·ª´ kh√≥a t·ª´ c√¢u h·ªèi
  const extractKeywords = (question) => {
    const commonKeywords = [
      'bi·ªÉn b√°o', 'bi·ªÉn', 't·ªëc ƒë·ªô', 'ƒëi·ªÉm li·ªát', 'n·ªìng ƒë·ªô c·ªìn',
      'giao th√¥ng', 'ƒë∆∞·ªùng b·ªô', 'xe m√¥ t√¥', 'xe g·∫Øn m√°y',
      'quy t·∫Øc', 'lu·∫≠t giao th√¥ng', 'vi ph·∫°m', 'c·∫•m',
      'ƒë∆∞·ª£c ph√©p', 'kh√¥ng ƒë∆∞·ª£c', 'b·∫Øt bu·ªôc', 'b√°o hi·ªáu',
      'quay ƒë·∫ßu', 'r·∫Ω tr√°i', 'r·∫Ω ph·∫£i', 'd·ª´ng xe', 'ƒë·ªó xe',
      'v∆∞·ª£t xe', 'l√†n ƒë∆∞·ªùng', '∆∞u ti√™n', 'giao nhau'
    ];
    
    const foundKeywords = commonKeywords.filter(keyword => 
      question.toLowerCase().includes(keyword.toLowerCase())
    );
    
    return foundKeywords.length > 0 ? foundKeywords : ['Kh√°c'];
  };

  // T√¨m ki·∫øm c√¢u h·ªèi d·ª±a tr√™n t·ª´ kh√≥a
  const filteredQuestions = useMemo(() => {
    if (!searchTerm.trim()) return [];
    
    const searchLower = searchTerm.toLowerCase();
    return questionsData.filter(question => {
      // T√¨m ki·∫øm trong c√¢u h·ªèi
      if (question.question.toLowerCase().includes(searchLower)) {
        return true;
      }
      
      // T√¨m ki·∫øm trong c√°c ƒë√°p √°n
      if (question.answers.some(answer => 
        answer.toLowerCase().includes(searchLower)
      )) {
        return true;
      }
      
      // T√¨m ki·∫øm trong gi·∫£i th√≠ch
      if (question.explanation && 
          question.explanation.toLowerCase().includes(searchLower)) {
        return true;
      }
      
      return false;
    });
  }, [searchTerm]);

  // Nh√≥m c√¢u h·ªèi theo ch·ªß ƒë·ªÅ (d·ª±a tr√™n t·ª´ kh√≥a chung)
  const groupedQuestions = useMemo(() => {
    if (filteredQuestions.length === 0) return [];
    
    const groups = {};
    
    filteredQuestions.forEach(question => {
      // T√¨m t·ª´ kh√≥a ch√≠nh trong c√¢u h·ªèi
      const keywords = extractKeywords(question.question);
      const mainKeyword = keywords[0] || 'Kh√°c';
      
      if (!groups[mainKeyword]) {
        groups[mainKeyword] = [];
      }
      groups[mainKeyword].push(question);
    });
    
    return Object.entries(groups).map(([keyword, questions]) => ({
      keyword,
      questions,
      count: questions.length
    }));
  }, [filteredQuestions]);

  const toggleQuestionExpansion = (questionId) => {
    const newExpanded = new Set(expandedQuestions);
    if (newExpanded.has(questionId)) {
      newExpanded.delete(questionId);
    } else {
      newExpanded.add(questionId);
    }
    setExpandedQuestions(newExpanded);
  };

  const startPracticeWithQuestions = (questions) => {
    const questionIds = questions.map(q => q.id);
    navigate('/practice', { 
      state: { 
        mode: 'custom',
        questionIds,
        searchTerm 
      } 
    });
  };

  const clearSearch = () => {
    setSearchTerm('');
    setExpandedQuestions(new Set());
  };

  return (
    <Paper sx={{ p: 3, mb: 4, backgroundColor: 'background.default' }}>
      <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', mb: 3 }}>
        üîç T√¨m ki·∫øm c√¢u h·ªèi theo t·ª´ kh√≥a
      </Typography>
      
      <Box sx={{ mb: 3 }}>
        <TextField
          fullWidth
          variant="outlined"
          placeholder="Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm (v√≠ d·ª•: bi·ªÉn b√°o, t·ªëc ƒë·ªô, n·ªìng ƒë·ªô c·ªìn...)"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search color="primary" />
              </InputAdornment>
            ),
            endAdornment: searchTerm && (
              <InputAdornment position="end">
                <IconButton onClick={clearSearch} size="small">
                  <Clear />
                </IconButton>
              </InputAdornment>
            ),
          }}
          sx={{ mb: 2 }}
        />
        
        {searchTerm && (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Typography variant="body2" color="text.secondary">
              T√¨m th·∫•y {filteredQuestions.length} c√¢u h·ªèi li√™n quan
            </Typography>
            {filteredQuestions.length > 0 && (
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Chip 
                  label={`${filteredQuestions.filter(q => q.isDiemLiet).length} ƒëi·ªÉm li·ªát`} 
                  size="small" 
                  color="error" 
                  variant="outlined"
                />
                <Chip 
                  label={`${filteredQuestions.filter(q => !q.isDiemLiet).length} th∆∞·ªùng`} 
                  size="small" 
                  color="primary" 
                  variant="outlined"
                />
              </Box>
            )}
          </Box>
        )}
        
        {!searchTerm && (
          <Box sx={{ mt: 2 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1 }}>
              G·ª£i √Ω t·ª´ kh√≥a t√¨m ki·∫øm:
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {[
                'bi·ªÉn b√°o', 't·ªëc ƒë·ªô', 'n·ªìng ƒë·ªô c·ªìn', 'ƒëi·ªÉm li·ªát', 'giao th√¥ng',
                'xe m√¥ t√¥', 'quy t·∫Øc', 'vi ph·∫°m', 'c·∫•m', 'ƒë∆∞·ª£c ph√©p',
                'b√°o hi·ªáu', 'ƒë∆∞·ªùng b·ªô', 'xe g·∫Øn m√°y', 'b·∫Øt bu·ªôc',
                'quay ƒë·∫ßu', 'r·∫Ω tr√°i', 'r·∫Ω ph·∫£i', 'd·ª´ng xe', 'ƒë·ªó xe',
                'v∆∞·ª£t xe', 'l√†n ƒë∆∞·ªùng', '∆∞u ti√™n', 'giao nhau'
              ].map((keyword) => (
                <Chip
                  key={keyword}
                  label={keyword}
                  size="small"
                  variant="outlined"
                  onClick={() => setSearchTerm(keyword)}
                  sx={{ cursor: 'pointer', '&:hover': { backgroundColor: 'action.hover' } }}
                />
              ))}
            </Box>
          </Box>
        )}
      </Box>

      {searchTerm && (
        <Collapse in={true}>
          {filteredQuestions.length === 0 ? (
            <Alert severity="info">
              <Typography variant="body2">
                Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "{searchTerm}". 
                H√£y th·ª≠ t·ª´ kh√≥a kh√°c ho·∫∑c ki·ªÉm tra ch√≠nh t·∫£.
              </Typography>
            </Alert>
          ) : (
            <Box>
              {groupedQuestions.map((group, groupIndex) => (
                <Card key={groupIndex} sx={{ mb: 3 }}>
                  <CardContent>
                    <Box sx={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      alignItems: 'center',
                      mb: 2 
                    }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                          {group.keyword}
                        </Typography>
                        <Chip 
                          label={`${group.count} c√¢u`} 
                          size="small" 
                          color="primary" 
                        />
                      </Box>
                      <Button
                        variant="contained"
                        size="small"
                        onClick={() => startPracticeWithQuestions(group.questions)}
                        startIcon={<Quiz />}
                      >
                        √în t·∫≠p nh√≥m n√†y
                      </Button>
                    </Box>
                    
                    <Divider sx={{ mb: 2 }} />
                    
                                         <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                       {group.questions.map((question, index) => (
                         <Card key={question.id} variant="outlined" sx={{ 
                           borderColor: question.isDiemLiet ? 'error.main' : 'divider',
                           backgroundColor: question.isDiemLiet ? 'error.light' : 'background.paper',
                           width: '100%'
                         }}>
                           <CardContent sx={{ py: 2, px: 2 }}>
                             <Box sx={{ 
                               display: 'flex', 
                               justifyContent: 'space-between', 
                               alignItems: 'flex-start',
                               mb: 1
                             }}>
                               <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>
                                 <Typography variant="subtitle2" sx={{ fontWeight: 'bold' }}>
                                   C√¢u {question.id}
                                 </Typography>
                                 {question.isDiemLiet && (
                                   <Chip 
                                     label="ƒêi·ªÉm li·ªát" 
                                     size="small" 
                                     color="error" 
                                     icon={<Warning />}
                                   />
                                 )}
                               </Box>
                               <IconButton
                                 size="small"
                                 onClick={() => toggleQuestionExpansion(question.id)}
                               >
                                 {expandedQuestions.has(question.id) ? 
                                   <ExpandLess /> : <ExpandMore />
                                 }
                               </IconButton>
                             </Box>
                             
                             <Typography variant="body2" sx={{ mb: 1 }}>
                               {question.question}
                             </Typography>
                             
                             {question.image && (
                               <Box sx={{ mb: 1 }}>
                                 <img 
                                   src={question.image} 
                                   alt="C√¢u h·ªèi"
                                   style={{ 
                                     maxWidth: '100%', 
                                     maxHeight: 150,
                                     borderRadius: 4
                                   }}
                                 />
                               </Box>
                             )}
                             
                             <Collapse in={expandedQuestions.has(question.id)}>
                               <Box sx={{ mt: 2 }}>
                                 <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1 }}>
                                   C√°c ƒë√°p √°n:
                                 </Typography>
                                 {question.answers.map((answer, answerIndex) => (
                                   <Box 
                                     key={answerIndex}
                                     sx={{ 
                                       display: 'flex', 
                                       alignItems: 'center', 
                                       gap: 1,
                                       mb: 0.5,
                                       p: 1,
                                       borderRadius: 1,
                                       backgroundColor: answerIndex === question.correctAnswer ? 
                                         'success.light' : 'background.default',
                                       border: answerIndex === question.correctAnswer ? 
                                         '1px solid' : '1px solid transparent',
                                       borderColor: answerIndex === question.correctAnswer ? 
                                         'success.main' : 'transparent'
                                     }}
                                   >
                                     {answerIndex === question.correctAnswer && (
                                       <CheckCircle color="success" fontSize="small" />
                                     )}
                                     <Typography variant="body2">
                                       {String.fromCharCode(65 + answerIndex)}. {answer}
                                     </Typography>
                                   </Box>
                                 ))}
                                 
                                 {question.explanation && (
                                   <Box sx={{ mt: 2 }}>
                                     <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1 }}>
                                       Gi·∫£i th√≠ch:
                                     </Typography>
                                     <Typography variant="body2" color="text.secondary">
                                       {question.explanation}
                                     </Typography>
                                   </Box>
                                 )}
                               </Box>
                             </Collapse>
                           </CardContent>
                         </Card>
                       ))}
                     </Box>
                  </CardContent>
                </Card>
              ))}
              
              <Box sx={{ textAlign: 'center', mt: 3 }}>
                <Button
                  variant="contained"
                  size="large"
                  onClick={() => startPracticeWithQuestions(filteredQuestions)}
                  startIcon={<Quiz />}
                  sx={{ minWidth: 200 }}
                >
                  √în t·∫≠p t·∫•t c·∫£ ({filteredQuestions.length} c√¢u)
                </Button>
              </Box>
            </Box>
          )}
        </Collapse>
      )}
    </Paper>
  );
};

export default SearchQuestions;
